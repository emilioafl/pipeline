import pipeline.exceptions as exc

from os.path import exists

from pipeline.scanning.base import BaseScanner
from pipeline.common.tools import CommandTools
from pipeline.common.gitlab import PredefinedVariables

class CodeCoverage(BaseScanner):
    
    def run_analysis(self):
        jacoco_file = f"{PredefinedVariables.CI_PROJECT_DIR}/target/site/jacoco/jacoco.xml"
        if not exists(jacoco_file):
            raise exc.ExitError(
                user_message="El archivo jacoco.xml no existe.",
                log_message="jacoco.xml file not found."
            )
        command=f"python /tools/jacoco2cobertura/jacoco2cobertura.py " \
            f"{jacoco_file} " \
            f"{PredefinedVariables.CI_PROJECT_DIR}/src/main/java/"
        result = CommandTools.run_command(
            command=command,
            workdir=PredefinedVariables.CI_PROJECT_DIR
        )
        return result
    
    def execute(self):
        self.printer.info("Ejecutando Code Coverage...")
        result = self.run_analysis()
        self.logger.info(f"{result.stdout}\n\n{result.stderr}")
        if result.returncode != 0:
            raise exc.ExitError(
                user_message="El Code Coverage ha fallado.",
                log_message="Code Coverage failed."
            )
        with open(f"{PredefinedVariables.CI_PROJECT_DIR}/target/site/cobertura.xml", "w") as f:
            f.write(result.stdout)
        self.logger.info("Code Coverage successfully generated.")
        self.printer.success("El Code Coverage se ha completado con Ã©xito.")
        
    def make_report(self):
        # The report is already generated by the jacoco plugin
        pass